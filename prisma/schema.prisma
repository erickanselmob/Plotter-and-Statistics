// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  approved      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  accounts Account[]
  sessions Session[]
  projects Project[]
  feedbacks Feedback[]
  sharedWith ProjectShare[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String    @id @default(cuid())
  userId      String
  name        String
  description String?
  createdAt   DateTime  @default(now())

  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  charts Chart[]
  grid   ProjectGrid?
  shares ProjectShare[]
}

enum ChartType {
  BAR
}

model Chart {
  id        String    @id @default(cuid())
  projectId String
  name      String
  type      ChartType @default(BAR)
  createdAt DateTime  @default(now())

  project Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  bars    BarDatum[]
}

model BarDatum {
  id      String  @id @default(cuid())
  chartId String?
  label   String
  value   Float

  chart Chart? @relation(fields: [chartId], references: [id], onDelete: Cascade)
}

model ProjectGrid {
  id        String   @id @default(cuid())
  projectId String   @unique
  columns   Json
  rows      Json
  defaultStyle Json?
  rowStyles    Json?
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Feedback {
  id        String   @id @default(cuid())
  userId    String
  type      FeedbackType
  title     String
  message   String   @db.Text
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum FeedbackType {
  BUG
  SUGGESTION
}

model ProjectShare {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}
